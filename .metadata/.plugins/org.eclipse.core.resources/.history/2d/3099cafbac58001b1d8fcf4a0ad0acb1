package com.cos.pserson.web;

import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cos.pserson.domain.User;
import com.cos.pserson.domain.UserRepository;

// 사용자 요청 마다 메모리에 뜸
@RestController
public class UserController {

	// IoC에 메모리가 띄어져 있음. (@Repository 때문)
	private UserRepository userRepository;
	
	// DI = 의존성 주입
	public UserController(UserRepository userRepository) {
		this.userRepository = userRepository;
	}
	
	// @RequireAtgsConstructor
	// private final UserRepository userRepository;
	// 이렇게 작성하면 굳이 디폴트 생성자를 안 만들어도 됨.
	
	// http://localgost:8080/user
	@GetMapping("/user")
	public List<User> findAll() {
		System.out.println("findAll");
		return userRepository.findAll(); // MessageConverter (JavaObject -> Json String)
	}
	
	// http://localgost:8080/user/1	
	@GetMapping("/user/{id}") 
	// 주소에 적혀 있는 값을 int로 바꿔줌
	// {} 안에 있는 값을 파싱해줌
	public void findById(@PathVariable int id) {
		System.out.println("findById");

	}

	// http://localgost:8080/user	
	@PostMapping("/user")
	// x-www-form-urlencoded => request.getParameter()
	public void save(String username, String password, String phone) {
		System.out.println("save");

	}
	
	// http://localgost:8080/user/1	
	@DeleteMapping("/user/{id}")
	public void delete(@PathVariable int id) {
		System.out.println("delete");

	}
	
	// http://localgost:8080/user/1	
	@PutMapping("/user/{id}")
	public void update(@PathVariable int id, String password, String phone) {
		System.out.println("update");

	}
}
